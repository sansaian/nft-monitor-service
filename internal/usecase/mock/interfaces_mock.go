// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	entities "nft-monitor-service/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataOutput is a mock of DataOutput interface.
type MockDataOutput struct {
	ctrl     *gomock.Controller
	recorder *MockDataOutputMockRecorder
}

// MockDataOutputMockRecorder is the mock recorder for MockDataOutput.
type MockDataOutputMockRecorder struct {
	mock *MockDataOutput
}

// NewMockDataOutput creates a new mock instance.
func NewMockDataOutput(ctrl *gomock.Controller) *MockDataOutput {
	mock := &MockDataOutput{ctrl: ctrl}
	mock.recorder = &MockDataOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataOutput) EXPECT() *MockDataOutputMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m *MockDataOutput) Output(data []*entities.NFTTokenData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockDataOutputMockRecorder) Output(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockDataOutput)(nil).Output), data)
}

// MockBlockchain is a mock of Blockchain interface.
type MockBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainMockRecorder
}

// MockBlockchainMockRecorder is the mock recorder for MockBlockchain.
type MockBlockchainMockRecorder struct {
	mock *MockBlockchain
}

// NewMockBlockchain creates a new mock instance.
func NewMockBlockchain(ctrl *gomock.Controller) *MockBlockchain {
	mock := &MockBlockchain{ctrl: ctrl}
	mock.recorder = &MockBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchain) EXPECT() *MockBlockchainMockRecorder {
	return m.recorder
}

// GetLastBlock mocks base method.
func (m *MockBlockchain) GetLastBlock() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlock indicates an expected call of GetLastBlock.
func (mr *MockBlockchainMockRecorder) GetLastBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockBlockchain)(nil).GetLastBlock))
}

// ParseBlock mocks base method.
func (m *MockBlockchain) ParseBlock(numBlock uint64) ([]*entities.NFTTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBlock", numBlock)
	ret0, _ := ret[0].([]*entities.NFTTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseBlock indicates an expected call of ParseBlock.
func (mr *MockBlockchainMockRecorder) ParseBlock(numBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBlock", reflect.TypeOf((*MockBlockchain)(nil).ParseBlock), numBlock)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetNFTDataFromBlock mocks base method.
func (m *MockUseCase) GetNFTDataFromBlock(numBlock uint64) ([]*entities.NFTTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFTDataFromBlock", numBlock)
	ret0, _ := ret[0].([]*entities.NFTTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFTDataFromBlock indicates an expected call of GetNFTDataFromBlock.
func (mr *MockUseCaseMockRecorder) GetNFTDataFromBlock(numBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFTDataFromBlock", reflect.TypeOf((*MockUseCase)(nil).GetNFTDataFromBlock), numBlock)
}
